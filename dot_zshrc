# -*- mode: bash-ts -*-

source "$HOME/.shell_common"

# XDG
# NOTE: The XDG subdirectories need to exist, so we ensure that they do:
mkdir -p "$XDG_CACHE_HOME/zsh" "$XDG_STATE_HOME/zsh"

# ----------------------------------------------------------------------
# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname "$ZINIT_HOME")"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Plugins:
# --------
zinit lucid wait for \
  "zsh-users/zsh-completions"

# Use C-f or right-arrow to accept suggestion:
zinit lucid wait for \
  "zsh-users/zsh-autosuggestions"

zinit lucid wait for \
  "chrischambers/zsh-you-should-use"

# Syntax Highlighting should come last
zinit lucid wait for \
  "zsh-users/zsh-syntax-highlighting"

# Turbo Mode: (i.e. quicker prompt startup times)
# -----------------------------------------------
# autoload -Uz compinit
# compinit
zi for \
    atload"zicompinit; zicdreplay" \
    blockf \
    lucid \
    wait \
  zsh-users/zsh-completions

# ----------------------------------------------------------------------
# Completions:
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"
compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"

unsetopt list_ambiguous  # ``find -ex<TAB>`` will complete up to 'exec', but
                         # also list the other completions (``-execdir``, in
                         # this case)

# Something like vim's 'smartcase' - here, completion is case-insensitive where
# lowercase letters are used, but not the reverse:
zstyle ':completion:*:(^approximate):*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# History:

export HISTFILE="$XDG_STATE_HOME"/zsh/history
HISTSIZE=10000
export SAVEHIST=$HISTSIZE
setopt extended_history   # Adds extra info to history (esp. timestamps)
setopt histverify         # History substitutions placed on cli for editing,
                          # not run automatically.
setopt inc_append_history # History incrementally appended to file, as opposed
                          # to appending on shell exit (setopt append_history),
                          # or clobbering the history file (neither option set,
                          # and a common issue with bash). History also shared
                          # across sessions.
setopt share_history      # Hurrah!
bindkey ' ' magic-space   # Enable 'magic space', which will automatically
                          # perform history substitution when spacebar is
                          # pressed.

setopt hist_ignore_dups   # Consecutive duplicate lines not saved (use setopt
                          # hist_ignore_all_dups to remove all previous
                          # duplicate lines, as opposed to consecutive ones).
setopt hist_find_no_dups  # When searching backwards through history, encounter
                          # each different command once, even if repeated
                          # multiple times
setopt hist_ignore_space  # Lines preceded by ' ' not stored in history
setopt hist_reduce_blanks # Remove extraneous whitespace when storing history

hgrep() {
    history 1 | grep "$@"
}

# Keybindings:

autoload -Uz edit-command-line
zle -N edit-command-line

bindkey -M vicmd 'v' edit-command-line
bindkey -M viins "\C-a" beginning-of-line
bindkey -M viins "\C-b" backward-char
bindkey -M viins "\C-d" delete-char
bindkey -M viins "\C-e" end-of-line
bindkey -M viins "\C-f" forward-char
bindkey -M viins "\C-k" kill-line
bindkey -M viins "\C-n" down-line-or-history
bindkey -M viins "\C-p" up-line-or-history
bindkey -M viins "\C-o" accept-line-and-down-history
bindkey -M viins "\C-w" backward-kill-word
bindkey -M viins "\e[A" history-beginning-search-backward
bindkey -M viins "\e[B" history-beginning-search-forward
bindkey -M viins "\C-h" backward-delete-char
bindkey -M viins "\C-r" history-incremental-search-backward
bindkey -M viins "\C-s" history-incremental-search-forward

bindkey -M viins "\C-u" undo

# Basically essential: by default, backspace is bound to
# vi-backward-delete-char, which is awful and non-intuitive: "If in insert mode
# this won't delete past the point where insert mode was last entered." -
# http://www.cs.elte.hu/zsh-manual/zsh_14.html#SEC45
bindkey -M viins '^?' backward-delete-char

# Integrate this, somehow?
# bindkey -M emacs '\ee' edit-command-line
bindkey -M viins "\C-x\C-e" edit-command-line

set -o vi

export KEYTIMEOUT=30  # Default: 40, set lower to reduce escape key delay

# fzf:
if [ -n "${commands[fzf-share]}" ]; then
  source "$(fzf-share)/key-bindings.zsh"
  source "$(fzf-share)/completion.zsh"
fi

# -- Use fd instead of find --

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

# For the `**` tab completion for files and directories:
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# For the `**` tab completion for directories only (e.g. `cd **`:
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

# ------------------------------------------------------------------------------
# Enable fzf-git integration:
# Source: <https://www.josean.com/posts/7-amazing-cli-tools>
source "$(nix path-info nixpkgs#fzf-git-sh)/share/fzf-git-sh/fzf-git.sh"

# Note that keybinds need to be done quite quickly because of the KEYTIMEOUT value.

# - C-G, C-F :: Files
# - C-G, C-B :: Branches
# - C-G, C-T :: Tags
# - C-G, C-R :: Remotes
# - C-G, C-H :: commit Hashes
# - C-G, C-S :: Stashes
# - C-G, C-L :: reflogs
# - C-G, C-W :: Worktrees
# - C-G, C-E :: Each ref (git for-each-ref)

# TAB or SHIFT-TAB to select multiple objects
# CTRL-/ to change preview window layout
# CTRL-O to open the object in the web browser (in GitHub URL scheme)
# ------------------------------------------------------------------------------
show_file_or_dir_preview="if [ -d {} ]; then lsd --tree --depth 2 --color=always --icon=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"
export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
export FZF_ALT_C_OPTS="--preview 'lsd --tree --depth 2 --color=always --icon=always {} | head -200'"

# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'lsd --tree --depth 2 --color=always --icon=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo $'{}"                                                  "$@" ;;
    ssh)          fzf --preview 'dig {}'                                                           "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview"                                        "$@" ;;
  esac
}

# direnv:
eval "$(direnv hook zsh)"

# Zoxide:
eval "$(zoxide init --cmd cd zsh)"

# Prompt:
export STARSHIP_CONFIG=~/.config/starship/zsh.toml
eval "$(starship init zsh)"

if [[ -r "$HOME/.zshrc.local" ]]; then
  source "$HOME/.zshrc.local"
fi
